// File main.cpp

/*****************************************************************
	Programmer: Matthew Sherwood, Li Zhang, Juan Hernandez       *
	Class: CSCE 4600                                             *
	Date: 03/17/2015                                             *
	Assignment: Homework 2 - Program 3                           *
	Purpose: To simulate process generation                      *
             Processors are all identical in this case           * 
*****************************************************************/

#include "processes.h"
#include "processor.h"
#include <string>
#include <fstream>

#define clear() cout<<"\033[H\033[J"

void procOutput(c_Proc** ,int);
void sortProcs(c_Proc**);
void welcomeMsg();
void endMsg();
extern void schedulerLoop(c_Proc**, int);
extern void processorOutput();

/** @brief           Writes process info to processes.txt
 *
 *  @details         Writes the process info after being sorted 
 *                   from least to greatest
 *
 *  @param process[] An array of all the processes.
 *  @param procNum   Total amount of processes
 */
void fileOutput(c_Proc** process, int procNum){
	//Clears the data.txt file just in case
	//"make clean" has not been run 
	process[0]->f.open("processes.txt");
	process[0]->fileOutput();
	
	//Writes process info to data.txt
	for(int i=0; i<procNum; ++i){
		process[i]->f.open("processes.txt",ios::app);// the output file 
		process[i]->fileOutput();
		process[i]->f.close();
	}
}

/** @brief           Bubble sort algorithm implementation
*
*   @details         Sorts according to exponent first and then base 
*                    while the exponent is the same
*
*   @param process[] Array of processes 
*/
void sortProcs(c_Proc** process){
	//Creates a temporary process to use when switching process
	c_Proc* temp = new c_Proc(0);

	//Sort process from least to greatest based on the exponent
	for (int i=99; i>= 0; i--){
		for (int j = 1; j <= i; j++){
			if (process[j-1]->exponent > process[j]->exponent){
				temp = process[j-1];
				process[j-1] = process[j];
				process[j] = temp;
			} 
		} 
	}
	//Sort process from least to greatest based on the base when
	//the exponent is the same
	for (int i=99; i>= 0; i--){
		for (int j = 1; j <= i; j++){
			if (process[j-1]->exponent == process[j]->exponent){
				if(process[j-1]->base > process[j]->base ){
					temp = process[j-1];
					process[j-1] = process[j];
					process[j] = temp;
				}
			} 
		} 
   }
  //Deletes the temporary process to free up memory 
  //delete temp;
}

void welcomeMsg(){
	cout<<"Welcome to Group 14's Scheduler simulator!"<<endl;
	cout<<"For this simulation, all processors are equal"<<endl;
	cout<<"Speed: 2GHz \nMemory:8Gb\n"<<endl;
	cout<<"Let's get started!\n"<<endl;
}

void endMsg(){
	cout<<"Thank you for using the scheduler simulator!\n"<<endl;
	cout<<"The files generated by this program for verification are:"<<endl;
	cout<<"processors.txt processes.txt nextJob.txt\n"<<endl;
	cout<<"Goodbye!"<<endl;
}

int main(){
	int procNum=100;
	string prompt;
	//Clears screen
    //system("clear");
    clear();

	//Welcome message
	welcomeMsg();
	
	//Creation of processes
	cout<<"Creating 100 processes...";
	c_Proc* process[procNum];
	for(int i=0;i<procNum;i++)
		process[i] = new c_Proc(i);
	cout<<"100 new processes created."<<endl;
	
	//Sorts processes
	cout<<"Sorting processes...";
	sortProcs(process);
	cout<<"Processes sorted!"<<endl;
	
	//Runs scheduler
	cout<<"Starting process scheduler...";
	schedulerLoop(process, procNum);
	cout<<"All processes successfully scheduled!\n"<<endl;
	
	//Displays which processor has which job assigned to it
	processorOutput();
	
	//Sends processes info to processes.txt
	fileOutput(process,procNum);
	
	//Program termination
	endMsg();
	
	return 0;
}
